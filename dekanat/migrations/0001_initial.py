# Generated by Django 2.1.4 on 2019-07-25 07:36

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dict_app', '0001_initial'),
        ('edu_plans', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attestation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semestr_number', models.IntegerField(verbose_name='Номер семестра')),
                ('academic_year', models.CharField(blank=True, max_length=20, null=True, verbose_name='Год обучения')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name='дата начала аттестации')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='дата окончания аттестации')),
                ('index', models.IntegerField(blank=True, null=True, verbose_name='порядковый номер аттестации ')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dict_app.Employer')),
            ],
        ),
        migrations.CreateModel(
            name='AttestationAspirantCheckDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control', models.IntegerField(blank=True, choices=[(0, 'Годовой отчет'), (1, 'Промежуточный отчет'), (2, 'Заключение кафедры'), (3, 'Индивидуальный учебный план')], null=True, verbose_name='наименование пункта аттестации')),
                ('mark_type', models.IntegerField(choices=[(0, 'Оценка от 2 до 5'), (1, 'Зачет/незачет'), (2, 'Баллы от 0  до 100')], default=2, verbose_name='тип оценки')),
            ],
        ),
        migrations.CreateModel(
            name='AttestationItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, null=True, verbose_name='оценка')),
            ],
        ),
        migrations.CreateModel(
            name='AttestationStudentSkip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid', models.IntegerField(blank=True, null=True, verbose_name='по уважительной причине')),
                ('no_valid', models.IntegerField(blank=True, null=True, verbose_name='по не уважительной причине')),
                ('attestation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Attestation')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_group', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название группы')),
                ('kurs', models.IntegerField(blank=True, default=1, null=True, verbose_name='Курс')),
                ('created_year', models.IntegerField(blank=True, default=2000, null=True, verbose_name='Год создания группы')),
                ('created_date_group', models.DateField(blank=True, null=True, verbose_name='Дата создания')),
                ('free_date_group', models.DateField(blank=True, null=True, verbose_name='Дата расформирования группы')),
                ('dep', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dict_app.EduDepartment', verbose_name='Выпускающая кафедра или РИМЦ')),
                ('edu_form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dict_app.DictEduForm')),
                ('spec_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='edu_plans.Spec')),
            ],
        ),
        migrations.CreateModel(
            name='GroupInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.Group')),
                ('kurator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.Employer')),
            ],
        ),
        migrations.CreateModel(
            name='MarkBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MarkBookItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('markBook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.MarkBook')),
            ],
        ),
        migrations.CreateModel(
            name='Retest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20, verbose_name='Номер ведомости')),
                ('date_creating', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('date_closing', models.DateField(blank=True, null=True, verbose_name='Дата закрытия')),
                ('is_open', models.BooleanField(default=True)),
                ('reason', models.TextField(verbose_name='причина создания перезачета')),
                ('return_date', models.DateField(blank=True, null=True, verbose_name='Дата возврата')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='dict_app.Employer', verbose_name='Автор документа')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RetestItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.IntegerField(default=0)),
                ('retest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Retest')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_unit', models.IntegerField(choices=[(0, 'семестр'), (1, 'курс')], default=0, verbose_name='Тип периода  - семестр или курс')),
                ('period_number', models.IntegerField(verbose_name='Номер семестра или курса')),
                ('semestr_type', models.IntegerField(blank=True, choices=[(0, 'осенний'), (1, 'весенний'), (2, 'весениий 2')], null=True, verbose_name='Наименование периода')),
                ('academic_year', models.CharField(max_length=20, verbose_name='учебный год')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name='Дата начала сессии')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Дата конца сессии')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Group', verbose_name='группа')),
            ],
        ),
        migrations.CreateModel(
            name='SessionScorecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20, verbose_name='Номер ведомости')),
                ('date_creating', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('date_closing', models.DateField(blank=True, null=True, verbose_name='Дата закрытия')),
                ('is_open', models.BooleanField(default=True)),
                ('type', models.IntegerField(choices=[(0, 'Первичная'), (1, 'Повторная')], default=0)),
                ('issue_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата выдачи ведомости')),
                ('return_date', models.DateField(blank=True, null=True, verbose_name='Дата возврата ведомости')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='dict_app.Employer', verbose_name='Автор документа')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SessionScorecardItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.IntegerField(default=0)),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата сдачи предмета')),
                ('scorecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.SessionScorecard')),
            ],
        ),
        migrations.CreateModel(
            name='SessionSubjectControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_type', models.CharField(blank=True, choices=[('test', 'Зачет'), ('d_test', 'Дифференцированный зачет'), ('kr', 'Курсовая работа'), ('kp', 'Курсовой проект'), ('exam', 'Экзамен')], max_length=50, null=True)),
                ('plan_semestr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edu_plans.PlanSemestr')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Session')),
                ('tutors', models.ManyToManyField(blank=True, to='dict_app.Employer', verbose_name='Преподаватели')),
            ],
        ),
        migrations.CreateModel(
            name='Stipend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(choices=[(0, 'Нет стипендии'), (100, 'Базовая стипендия'), (150, 'Повышенная (одна 4)'), (200, 'Повышенная (все 5)'), (300, 'Академическая стипендия')], default=100)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Session')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='Уникальный идентификатор человека')),
                ('name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=256, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=256, null=True, verbose_name='Отчество')),
                ('status', models.IntegerField(blank=True, choices=[(0, 'Абитуриент'), (1, 'Обучающийся'), (2, 'Выпускник'), (3, 'Отчисленный'), (4, 'В академическом отпуске'), (5, 'Обучающийся с продленной защитой'), (6, 'Состояние для межфакультетских перемещений')], null=True)),
                ('zcode', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер зачетной книжки')),
                ('kurs', models.IntegerField(default=1)),
                ('diploma_theme', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Тема ВКР')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAbitInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_1c', models.CharField(blank=True, max_length=20, null=True, verbose_name='Идентификатор обучающегося в 1C-Университет')),
                ('abit_is_direction', models.BooleanField(blank=True, default=False, verbose_name='Целевой набор')),
                ('abit_edu_form', models.CharField(blank=True, max_length=30, null=True, verbose_name='Форма обучения')),
                ('abit_spec_code', models.CharField(blank=True, max_length=30, null=True, verbose_name='Код направления/специальности')),
                ('abit_spec_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование направления/специальности')),
                ('abit_subspec_code', models.CharField(blank=True, max_length=30, null=True, verbose_name='Код профиля/специализации/направленности')),
                ('abit_subspec_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование профиля/специализации/направленности')),
                ('ent_doc_num', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер приказа о зачислении')),
                ('ent_doc_date', models.DateField(blank=True, null=True, verbose_name='Дата приказа о зачислении')),
                ('another_type', models.BooleanField(blank=True, default=False, null=True, verbose_name='Он с другого ВУЗа? ')),
                ('another_doc_type', models.IntegerField(blank=True, choices=[(0, 'справка об обучении'), (1, 'академическая справка')], null=True, verbose_name='Предыдущий документ')),
                ('another_doc_series', models.CharField(blank=True, max_length=10, null=True, verbose_name='Серия')),
                ('another_doc_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер')),
                ('another_year_start', models.IntegerField(blank=True, null=True, verbose_name='Год поступления в предыдущий ВУЗ')),
                ('abit_dep', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.EduDepartment', verbose_name='Подразделение')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAchievment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.CharField(blank=True, max_length=500, null=True, verbose_name='Описание достижения')),
                ('file', models.FileField(blank=True, null=True, upload_to='\\stdAchiev')),
                ('date', models.DateField(auto_now=True, null=True)),
                ('link', models.CharField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictAchievType')),
            ],
        ),
        migrations.CreateModel(
            name='StudentBankDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название банка')),
                ('account', models.CharField(blank=True, max_length=30, null=True, verbose_name='Счет')),
                ('bic', models.CharField(blank=True, max_length=20, null=True, verbose_name='БИК')),
                ('corr_account', models.CharField(blank=True, max_length=30, null=True, verbose_name='Корр. счет')),
                ('inn', models.CharField(blank=True, max_length=20, null=True, verbose_name='ИНН')),
                ('kpp', models.CharField(blank=True, max_length=20, null=True, verbose_name='КПП')),
                ('okpo', models.CharField(blank=True, max_length=20, null=True, verbose_name='ОКПО')),
                ('ogrn', models.CharField(blank=True, max_length=20, null=True, verbose_name='ОГРН')),
            ],
        ),
        migrations.CreateModel(
            name='StudentDocs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snils_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер СНИЛС')),
                ('inn_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер ИНН')),
                ('oms_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер страхового полиса')),
                ('visa_series_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Серия и Номер визы')),
                ('visa_start_date', models.DateField(blank=True, null=True, verbose_name='Дата начала действия визы')),
                ('visa_end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания дейсвия визы')),
            ],
        ),
        migrations.CreateModel(
            name='StudentEduDocs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eduDocSer', models.CharField(blank=True, max_length=20, null=True, verbose_name='Серия документа')),
                ('eduDocNum', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер документа')),
                ('eduDocDateGet', models.DateField(blank=True, null=True, verbose_name='Дата выдачи документа')),
                ('eduDocRegNum', models.CharField(blank=True, max_length=20, null=True, verbose_name='Регистрационный номер')),
                ('is_dubl', models.BooleanField(blank=True, default=False, verbose_name='Дубликат документа')),
                ('signedBy', models.CharField(blank=True, max_length=20, null=True, verbose_name='Подпись на документе')),
                ('signedIsRector', models.BooleanField(blank=True, default=True, verbose_name='Подпись ИО ректора')),
                ('eduDocType', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictEduDocType')),
            ],
        ),
        migrations.CreateModel(
            name='StudentGAKInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exc_doc_num', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер приказа об отчислении')),
                ('exc_doc_date', models.DateField(blank=True, null=True, verbose_name='Дата приказа об отчислении')),
                ('is_gosExam', models.BooleanField(blank=True, default=False, verbose_name='Сдавался ли ГОС-экзамен')),
                ('gosExamMark', models.IntegerField(blank=True, null=True, verbose_name='Оценка, полученная на ГОС-экзамене')),
                ('diplomaMark', models.IntegerField(blank=True, null=True, verbose_name='Оценка, полученная за защиту диплома')),
                ('gakBoss', models.CharField(blank=True, max_length=500, null=True, verbose_name='Председатель ГАК, подписывающий диплом')),
                ('gakNum', models.CharField(blank=True, max_length=500, null=True, verbose_name='Номер протокола ГАК')),
                ('gakDate', models.DateField(blank=True, null=True, verbose_name='Дата протокола ГАК')),
                ('vkr_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictVKRType')),
            ],
        ),
        migrations.CreateModel(
            name='StudentHostel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('needHostel', models.BooleanField(blank=True, default=False, verbose_name='Нуждается в общежитии')),
                ('hostel', models.CharField(blank=True, max_length=50, null=True, verbose_name='Общежитие')),
                ('section', models.CharField(blank=True, max_length=20, null=True, verbose_name='Секция')),
                ('room', models.CharField(blank=True, max_length=20, null=True, verbose_name='Комната')),
                ('checkInDate', models.DateField(blank=True, null=True, verbose_name='Дата заселения')),
                ('checkOutDate', models.DateField(blank=True, null=True, verbose_name='Дата выселения')),
                ('orderLiveBy', models.CharField(blank=True, max_length=50, null=True, verbose_name='Сотрудник, подписывающий распоряжение о заселении')),
                ('orderLiveDate', models.DateField(blank=True, null=True, verbose_name='Дата распоряжения о заселении')),
            ],
        ),
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.IntegerField(blank=True, choices=[(1, 'мужской'), (0, 'женский')], null=True, verbose_name='Пол')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-Mail')),
                ('family_status', models.IntegerField(blank=True, choices=[(0, 'неженат/незамужем'), (1, 'женат/замужем')], null=True, verbose_name='Семейное положение')),
                ('is_orphan', models.BooleanField(blank=True, default=False, verbose_name='Сирота')),
                ('is_invalid', models.BooleanField(blank=True, default=False, verbose_name='Инвалид')),
                ('invalid_group', models.IntegerField(blank=True, null=True, verbose_name='Группа инвалидности')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='\\photo')),
                ('citizen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictCitizen')),
                ('fact_address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dict_app.Address', verbose_name='Фактический адрес проживания')),
                ('foreign_lang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictLang')),
                ('reg_address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='dict_app.Address', verbose_name='Адрес регистрации')),
            ],
        ),
        migrations.CreateModel(
            name='StudentJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование предприятия')),
                ('addr', models.CharField(blank=True, max_length=500, null=True, verbose_name='Адрес предприятия')),
                ('self', models.BooleanField(blank=True, default=False, verbose_name='Самостоятельное трудоустройство')),
                ('cert', models.CharField(blank=True, max_length=500, null=True, verbose_name='Удостоверение о трудоустройстве')),
            ],
        ),
        migrations.CreateModel(
            name='StudentMilitaryControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_mil_reg', models.BooleanField(blank=True, default=False, verbose_name='Состоит ли на воинском учете')),
                ('category', models.IntegerField(blank=True, choices=[(0, 'призывник'), (1, 'солдат'), (2, 'сержант'), (3, 'СНГ'), (4, 'иностранец')], null=True, verbose_name='категория')),
                ('comment', models.CharField(blank=True, max_length=500, null=True, verbose_name='Комментарий')),
                ('is_mil_kaf', models.BooleanField(default=False, verbose_name='Учится ли на военной кафедре')),
                ('contract_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер контракта')),
                ('contract_date', models.DateField(blank=True, null=True, verbose_name='Дата заключения контракта')),
                ('mil_kaf_edu_program', models.IntegerField(blank=True, choices=[(0, 'рядовой запаса'), (1, 'сержант запаса'), (2, 'лейтинант запаса')], null=True, verbose_name='Программа подготовки')),
                ('mil_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dict_app.DictMilOffice', verbose_name='Военкомат')),
            ],
        ),
        migrations.CreateModel(
            name='StudentPersonDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_series', models.CharField(blank=True, max_length=10, null=True, verbose_name='Серия')),
                ('doc_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер')),
                ('doc_dep', models.CharField(blank=True, max_length=300, null=True, verbose_name='Кем выдан')),
                ('doc_dep_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Код подразделения')),
                ('doc_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('doc_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictDocType')),
            ],
        ),
        migrations.CreateModel(
            name='StudentPrevEdu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prevEduOrg', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Организация, выдавшая документ об образовании')),
                ('yearEnd', models.IntegerField(blank=True, null=True, verbose_name='Год окончания предыдущего образования')),
                ('prevEduDocSer', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Серия документа о предыдущем образовании')),
                ('prevEduDocNum', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Номер документа о предыдущем образовании')),
                ('prevEduDocDateGet', models.DateField(blank=True, max_length=1000, null=True, verbose_name='Дата получения документа о предыдущем образовании')),
                ('prevEduDocCountry', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Страна, выдавшая документ о предыдущем образовании')),
                ('prevEduSpec', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Специальность, полученная в предыдущем образовании')),
                ('prevEduDocType', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictPrevEduDocType')),
                ('prevEduLevel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictPrevEduLevel')),
            ],
        ),
        migrations.CreateModel(
            name='StudentRelative',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=256, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=256, null=True, verbose_name='Отчество')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('address', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Адрес')),
                ('address_kladr', models.IntegerField(blank=True, null=True, verbose_name='Id адреса в КЛАДР')),
                ('work_place', models.CharField(blank=True, max_length=256, null=True, verbose_name='Место работы')),
                ('post', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Должность')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-Mail')),
                ('sms', models.BooleanField(blank=True, default=True, verbose_name='Согласие на смс-рассылку')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictRelativeDegree')),
            ],
        ),
        migrations.CreateModel(
            name='StudentRemarks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarkText', models.CharField(blank=True, max_length=500, null=True, verbose_name='Содержание замечания')),
                ('remarkBy', models.CharField(blank=True, max_length=50, null=True, verbose_name='Кем вынесено замечание')),
                ('remarkDate', models.DateField(blank=True, null=True, verbose_name='Дата получения замечания')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Tail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20, verbose_name='Номер ведомости')),
                ('date_creating', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('date_closing', models.DateField(blank=True, null=True, verbose_name='Дата закрытия')),
                ('is_open', models.BooleanField(default=True)),
                ('issue_date', models.DateField(default=datetime.date.today)),
                ('valid_date', models.DateField(blank=True, null=True)),
                ('reason', models.CharField(blank=True, max_length=200, null=True)),
                ('mark', models.IntegerField(default=0)),
                ('test_date', models.DateField(blank=True, null=True, verbose_name='Дата сдачи предмета')),
                ('free_check', models.BooleanField(default=False)),
                ('free_check_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='dict_app.Employer', verbose_name='Автор документа')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.SessionSubjectControl')),
                ('tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.Employer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttestationItemAspirant',
            fields=[
                ('attestationitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dekanat.AttestationItem')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.AttestationAspirantCheckDict')),
            ],
            bases=('dekanat.attestationitem',),
        ),
        migrations.CreateModel(
            name='AttestationItemStudent',
            fields=[
                ('attestationitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dekanat.AttestationItem')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edu_plans.DictSubject')),
            ],
            bases=('dekanat.attestationitem',),
        ),
        migrations.AddField(
            model_name='student',
            name='abit_info',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentAbitInfo'),
        ),
        migrations.AddField(
            model_name='student',
            name='bank_details',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentBankDetails'),
        ),
        migrations.AddField(
            model_name='student',
            name='diploma_tutor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.Employer'),
        ),
        migrations.AddField(
            model_name='student',
            name='docs',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentDocs'),
        ),
        migrations.AddField(
            model_name='student',
            name='edu_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictEduType'),
        ),
        migrations.AddField(
            model_name='student',
            name='exclude_learn_subjects',
            field=models.ManyToManyField(blank=True, to='edu_plans.PlanSubject'),
        ),
        migrations.AddField(
            model_name='student',
            name='gak_info',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentGAKInfo'),
        ),
        migrations.AddField(
            model_name='student',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.Group'),
        ),
        migrations.AddField(
            model_name='student',
            name='hostel',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentHostel'),
        ),
        migrations.AddField(
            model_name='student',
            name='info',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentInfo'),
        ),
        migrations.AddField(
            model_name='student',
            name='job',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentJob'),
        ),
        migrations.AddField(
            model_name='student',
            name='mil_info',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentMilitaryControl'),
        ),
        migrations.AddField(
            model_name='student',
            name='person_doc',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentPersonDoc'),
        ),
        migrations.AddField(
            model_name='student',
            name='plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edu_plans.Plan'),
        ),
        migrations.AddField(
            model_name='student',
            name='prev_edu',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dekanat.StudentPrevEdu'),
        ),
        migrations.AddField(
            model_name='student',
            name='stip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dict_app.DictStip'),
        ),
        migrations.AddField(
            model_name='stipend',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='sessionscorecarditem',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='sessionscorecard',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.SessionSubjectControl'),
        ),
        migrations.AddField(
            model_name='retestitem',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.SessionSubjectControl'),
        ),
        migrations.AddField(
            model_name='retest',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Session'),
        ),
        migrations.AddField(
            model_name='retest',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='markbook',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='groupinfo',
            name='proforg',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='groupinfo',
            name='starosta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='attestationstudentskip',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='attestationitem',
            name='attestation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Attestation'),
        ),
        migrations.AddField(
            model_name='attestationitem',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Student'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dekanat.Group', verbose_name='группа'),
        ),
    ]
